% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tempTraj_func.R
\name{temperedTrajectory}
\alias{temperedTrajectory}
\title{Tuning and simulation of tempered Hamiltonian dynamics}
\usage{
temperedTrajectory(
  x.init,
  logtarget,
  gradlt,
  massInv = 1,
  power,
  power.truth,
  jsize,
  maxEta = 3,
  lenEta,
  etaType = "piecewiselinear",
  tune,
  maxEta_tuning_method = "rectangular",
  search_scale,
  center_point,
  Uthreshold,
  MaxTuningIter = 100,
  leapfrog,
  cat_diag = FALSE
)
}
\arguments{
\item{x.init}{initial condition}

\item{logtarget}{log target density function (R function)}

\item{gradlt}{gradient of log target density (R function)}

\item{massInv}{mass-inverse matrix (currently, it is allowed to be only a scalar or a vector of the same length as v. When scalar, this means that the mass-inverse matrix is that constant times the identity matrix, and if \code{massInv} is a vector, then the mass-inverse matrix is the diagonal matrix having the diagonal entries given by \code{massInv}.)}

\item{power}{starting value for the estimated polynomial degree of the (local) growth rate of the potential function. The leapfrog step size for each step is given by jsize\emph{exp(4}eta/(power+2))}

\item{power.truth}{an optional parameter indicating the actual polynomial degree of the potential function (log target density). Used to evaluate the 'stabilized' potential energy given by U(x)\emph{e^(-2}power.truth/(power+2)*eta).}

\item{jsize}{starting value for the baseline leapfrog step size}

\item{maxEta}{starting value for the maximum of the eta sequence, which is one half times the log of the mass scaling factor (alpha)}

\item{lenEta}{starting value for the length of the eta sequence.}

\item{etaType}{either "piecewiselinear" or "sinusoidal". If "piecewiselinear", eta(k) = maxEta\emph{2/lenEta}min(k,lenEta-k), and if "sinusoidal", eta(k) = maxEta/2*(1-cos(2\emph{pi}k/lenEta)).}

\item{tune}{logical. should \code{jsize}, \code{maxEta}, \code{lenEta}, \code{power} be tuned? If so, the provided values for these arguments are used as the starting point of tuning.}

\item{maxEta_tuning_method}{tuning method for maxEta, one of "rectangular", "ellipsoidal", "Uthreshold", or "none". "rectangular" requires the simulated path to reach outside a certain interval for every coordinate axis at least once. "ellipsoidal" requires the simulated path to have a point that is at least a certain (scaled) Euclidean distance away from a specified center point. "Uthreshold" requires the simulated trajectory to attain a potential energy level higher than the provided value. If "none", no tuning of \code{maxEta} is carried out.}

\item{search_scale}{a scalar or a vector of length \code{length(x.init)}, indicating the scale of search for isolated modes for each coordiate direction. If a scalar, every coordinate direction has the same search scale. For the "rectangular" tuning method, this gives the half-width of the interval for each coordinate direction with center at the corresponding entry in \code{center_point}. For "ellipsoidal" tuning method, this gives the coordinate-scale for the ellipsoid, scaled by sqrt(d) where d is the dimension of the target space, i.e., the criterion is distance^2 = sum((x-center_point)^2/search_scale^2) > d. Only used when \code{maxEta_tuning_method} is "rectangular" or "ellipsoidal".}

\item{center_point}{the center of search for isolated modes, used when \code{maxEta_tuning_method} is "rectangular" or "ellipsoidal". A vector of equal length as \code{x.init}. When missing, The default is set to \code{x.init}.}

\item{Uthreshold}{If \code{maxEta_tuning_method} is "Uthreshold", then this argument gives the target value that the potential function along the simulated trajectory should exceed at least once.}

\item{MaxTuningIter}{the maximum number of tuning iterations before stopping further tuning, for each MCMC iteration}

\item{leapfrog}{optional parameter. If this argument is not given, the default leapfrog function will be used (see R/leapfrog.R). Otherwise, a custom R function for the leapfrog function can be used (see, for example, R/leapfrog_sensor.R).}

\item{cat_diag}{logical. If TRUE, print diagnostic messages using the \code{cat} function. Defaults to FALSE.}
}
\value{
A list consisting of several named entries as follows.
\itemize{
\item{xv: a matrix where each row is the concatenation \code{c(x,v)} for an intermediate point along the simulated trajectory. The first row gives the initial values, and the k(>=2)-th row gives the values after k-1 leapfrog steps. The position and velocity are unscaled, that is, \code{x} signifies x and \code{v} signifies v-tilde in Park (2024).}
\item{Kbar: The scaled kinetic energy values along the trajectory, 1/2\emph{vbar}M*vbar where vbar is given by \code{v} (v-tilde) multiplied by e^(2/(power+2)*eta).}
\item{Ubar: This entry is included only if \code{power.truth} is provided. Gives the values U(x)\emph{e^(-2}power.truth/(power+2)\emph{eta) along the trajectory.}
\item{alphatrace: e^(2}eta) along the trajectory.}
\item{lenEta_history: the values of lenEta during the tuning cycles}
\item{jsize_history: the values of jsize during the tuning cycles}
\item{power_history: the values of the estimated polynomial degree of the potential function (denoted by gamma in the paper) during the tuning cycles}
\item{maxEta_history: the values of the maximum value of eta during the tuning cycles}
\item{Hinc_history: the values of the net increase in the Hamiltonian during the tuning cycles}
}
}
\description{
applies the same tuning procedure implemented in ATHMC (automatically-tuned, tempered Hamiltonian Monte Carlo), but returns the constructed path and the tuning history for a single MCMC iteration (i.e., does not construct a chain).
}
\references{
Park, J. (2024). Sampling from high-dimensional, multimodal distributions using automatically-tuned, tempered Hamiltonian Monte Carlo \url{https://doi.org/10.48550/arXiv.2111.06871}
}
